{"remainingRequest":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/babel-loader/lib/index.js!/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/berkaykosebay/Documents/GitHub/DBL-Project/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true","dependencies":[{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/src/views/Home.vue","mtime":1623769065740},{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/berkaykosebay/Documents/GitHub/DBL-Project/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVTdGF0aWNWTm9kZSBhcyBfY3JlYXRlU3RhdGljVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtZmFlNWJlY2UiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LWZhZTViZWNlIik7Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBpZDogInRoZVNpZGViYXIiLAogIGNsYXNzOiAic2lkZWJhciIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJmaWxlVXBsb2FkIgp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJwIiwgewogIGlkOiAibXNnIgp9LCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlU3RhdGljVk5vZGUoIjxkaXYgY2xhc3M9XCJ3aW5kb3dTZWxlY3Rpb25cIiBkYXRhLXYtZmFlNWJlY2U+PGgzIGRhdGEtdi1mYWU1YmVjZT5Ob2RlLUxpbmsgRGlhZ3JhbSBXaW5kb3c8L2gzPjxzZWxlY3QgaWQ9XCJ0ZXN0U2VsZWN0TkxcIiBkYXRhLXYtZmFlNWJlY2U+PG9wdGlvbiB2YWx1ZT1cInZpc0xlZnRcIiBkYXRhLXYtZmFlNWJlY2U+TGVmdDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9XCJ2aXNSaWdodFwiIGRhdGEtdi1mYWU1YmVjZT5SaWdodDwvb3B0aW9uPjwvc2VsZWN0PjxoMyBkYXRhLXYtZmFlNWJlY2U+QWRqYWNlbmN5IE1hdHJpeCBXaW5kb3c8L2gzPjxzZWxlY3QgaWQ9XCJ0ZXN0U2VsZWN0QU1cIiBkYXRhLXYtZmFlNWJlY2U+PG9wdGlvbiB2YWx1ZT1cInZpc1JpZ2h0XCIgZGF0YS12LWZhZTViZWNlPlJpZ2h0PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cInZpc0xlZnRcIiBkYXRhLXYtZmFlNWJlY2U+TGVmdDwvb3B0aW9uPjwvc2VsZWN0PjwhLS1cbiAgICAgICZsdDtoMyBjbGFzcz0mcXVvdDt0eXBlJnF1b3Q7Jmd0O1NlbGVjdCB2aXN1YWxpc2F0aW9uIHR5cGUmbHQ7L2gzJmd0O1xuICAgICAgJmx0O3NlbGVjdCBpZD0mcXVvdDt2aXNUeXBlJnF1b3Q7Jmd0O1xuICAgICAgICAmbHQ7b3B0aW9uIHZhbHVlPSZxdW90O25vZGVsaW5rJnF1b3Q7Jmd0O05vZGUtTGluayBEaWFncmFtJmx0Oy9vcHRpb24mZ3Q7XG4gICAgICAgICZsdDtvcHRpb24gdmFsdWU9JnF1b3Q7bWF0cml4JnF1b3Q7Jmd0O0FkamFjZW5jeSBNYXRyaXgmbHQ7L29wdGlvbiZndDtcbiAgICAgICZsdDsvc2VsZWN0Jmd0O1xuICAgICZsdDsvZGl2Jmd0O1xuICAgIC0tPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRhTGlzdFwiIGRhdGEtdi1mYWU1YmVjZT48dWwgaWQ9XCJsaXN0XCIgY2xhc3M9XCJjb2x1bW5cIiBkYXRhLXYtZmFlNWJlY2U+PC91bD48L2Rpdj4iLCAyKTsKCnZhciBfaG9pc3RlZF82ID0gewogIGNsYXNzOiAic2lkZWJhckJ1dHRvbiIKfTsKCnZhciBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL19jcmVhdGVTdGF0aWNWTm9kZSgiPGRpdiBjbGFzcz1cInZpc0dyaWRcIiBkYXRhLXYtZmFlNWJlY2U+PGRpdiBpZD1cInZpc2NvbnRlbnRcIiBkYXRhLXYtZmFlNWJlY2U+PGRpdiBpZD1cInZpc0xlZnRcIiBkYXRhLXYtZmFlNWJlY2U+PC9kaXY+PC9kaXY+PGRpdiBpZD1cInZpc2NvbnRlbnRcIiBkYXRhLXYtZmFlNWJlY2U+PGRpdiBpZD1cInZpc1JpZ2h0XCIgZGF0YS12LWZhZTViZWNlPjwvZGl2PjwvZGl2PjwvZGl2PiIsIDEpOwoKdmFyIF9ob2lzdGVkXzggPSB7CiAgY2xhc3M6ICJzbGlkZXJEaXYiCn07Cgp2YXIgX2hvaXN0ZWRfOSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoInAiLCB7CiAgaWQ6ICJyYW5nZVZhbHVlIgp9LCAidGVzdCIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCl9wb3BTY29wZUlkKCk7CgpleHBvcnQgdmFyIHJlbmRlciA9IC8qI19fUFVSRV9fKi9fd2l0aElkKGZ1bmN0aW9uIChfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKCJhIiwgewogICAgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIsCiAgICBjbGFzczogImNsb3NlYnRuIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuY2xvc2VCYXIgJiYgJG9wdGlvbnMuY2xvc2VCYXIuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICLDlyIpLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJ0ZXh0IiwKICAgIHBsYWNlaG9sZGVyOiAiTmFtZSBvZiB0aGUgRGF0YXNldCIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuZGF0YXNldHMuZGF0YU5hbWUgPSAkZXZlbnQ7CiAgICB9KSwKICAgIGNsYXNzOiAiZm9ybS1jb250cm9sIgogIH0sIG51bGwsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192TW9kZWxUZXh0LCAkZGF0YS5kYXRhc2V0cy5kYXRhTmFtZV1dKSwgX2hvaXN0ZWRfMywgX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJmaWxlIiwKICAgIGFjY2VwdDogIi5jc3YiLAogICAgb25DaGFuZ2U6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc2VsZWN0RmlsZSAmJiAkb3B0aW9ucy5zZWxlY3RGaWxlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCBudWxsLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgX2NyZWF0ZVZOb2RlKCJidXR0b24iLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnVwbG9hZEZpbGUgJiYgJG9wdGlvbnMudXBsb2FkRmlsZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgIiBVcGxvYWQgIildKSwgX2hvaXN0ZWRfNF0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzYsIFtfY3JlYXRlVk5vZGUoImJ1dHRvbiIsIHsKICAgIGNsYXNzOiAib3BlbmJ0biIsCiAgICBvbkNsaWNrOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLm9wZW5CYXIgJiYgJG9wdGlvbnMub3BlbkJhci5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgIuKYsCBPcHRpb25zIildKSwgX2hvaXN0ZWRfNywgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF84LCBbX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJyYW5nZSIsCiAgICBtaW46ICIxIiwKICAgIG1heDogIjEwMCIsCiAgICB2YWx1ZTogIjUwIiwKICAgIGNsYXNzOiAic2xpZGVyIiwKICAgIGlkOiAicmFuZ2UiLAogICAgb25JbnB1dDogX2NhY2hlWzZdIHx8IChfY2FjaGVbNl0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5zaG93UmFuZ2VWYWx1ZSAmJiAkb3B0aW9ucy5zaG93UmFuZ2VWYWx1ZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgbnVsbCwgMzIKICAvKiBIWURSQVRFX0VWRU5UUyAqLwogICksIF9ob2lzdGVkXzldKV0sIDY0CiAgLyogU1RBQkxFX0ZSQUdNRU5UICovCiAgKTsKfSk7"},{"version":3,"sources":["/Users/berkaykosebay/Documents/GitHub/DBL-Project/src/views/Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"theSidebar\" class=\"sidebar\">\n    <a href=\"javascript:void(0)\" class=\"closebtn\" @click=\"closeBar\">&times;</a>\n\n    <div class=\"fileUpload\">\n      <input\n        type=\"text\"\n        placeholder=\"Name of the Dataset\"\n        v-model=\"datasets.dataName\"\n        class=\"form-control\"\n      />\n      <p id=\"msg\"></p>\n      <input type=\"file\" accept=\".csv\" @change=\"selectFile\" /><button\n        @click=\"uploadFile\"\n      >\n        Upload\n      </button>\n    </div>\n\n    <div class=\"windowSelection\">\n      <h3>Node-Link Diagram Window</h3>\n      <select id=\"testSelectNL\">\n        <option value=\"visLeft\">Left</option>\n        <option value=\"visRight\">Right</option>\n      </select>\n\n      <h3>Adjacency Matrix Window</h3>\n      <select id=\"testSelectAM\">\n        <option value=\"visRight\">Right</option>\n        <option value=\"visLeft\">Left</option>\n      </select>\n\n<!--\n      <h3 class=\"type\">Select visualisation type</h3>\n      <select id=\"visType\">\n        <option value=\"nodelink\">Node-Link Diagram</option>\n        <option value=\"matrix\">Adjacency Matrix</option>\n      </select>\n    </div>\n    -->\n    </div>\n\n    <div class=\"dataList\">\n      <ul id=\"list\" class=\"column\"></ul>\n    </div>\n  </div>\n\n  <div class=\"sidebarButton\">\n    <button class=\"openbtn\" @click=\"openBar\">&#9776; Options</button>\n  </div>\n\n  <div class=\"visGrid\">\n    <div id=\"viscontent\">\n      <div id=\"visLeft\"></div>\n    </div>\n    <div id=\"viscontent\"><div id=\"visRight\"></div></div>\n  </div>\n  <div class=\"sliderDiv\">\n    <input\n      type=\"range\"\n      min=\"1\"\n      max=\"100\"\n      value=\"50\"\n      class=\"slider\"\n      id=\"range\"\n      @input=\"showRangeValue\"\n    />\n    <p id=\"rangeValue\">test</p>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase\";\nimport * as d3 from \"d3\";\nimport { db } from \"../main\";\n//import generateNetwork from \"../visualisations/nodelink\";\nimport generateMatrix from \"../visualisations/adjacencymatrix\";\nimport generateNetworkCanvas from \"../visualisations/nodelinkv2.0\";\n\nexport default {\n  name: \"Home\",\n  components: {},\n  data() {\n    return {\n      datasets: {\n        fileLink: null,\n        dataName: null,\n      },\n      selectedFile: null,\n      datasetNo: 0,\n    };\n  },\n  mounted() {\n    this.getAllDatabaseEntries(); //the mounted() lifecycle executes after all components of the page have finished loading, so after the page is ready\n    // the previous uploaded datasets are visible in the page.\n  },\n\n  methods: {\n    showRangeValue() {\n      var x = document.getElementById(\"range\").value;\n      document.getElementById(\"rangeValue\").innerHTML = x;\n    },\n    showDatabaseEntries(name, link) {\n      // function sleep(ms) {\n      //   return new Promise(\n      //     resolve => setTimeout(resolve, ms)\n      //   );\n      // }\n      var ul = document.getElementById(\"list\");\n      var header = document.createElement(\"h2\");\n\n      var selection = null;\n\n      var _name = document.createElement(\"li\");\n      var _visualise = document.createElement(\"button\");\n      header.innerHTML = \"Dataset-\" + ++this.datasetNo;\n      _name.innerHTML = \"Name of the dataset: \" + name;\n      _visualise.innerHTML = \"Visualise\";\n      _visualise.onclick = async () => {    \n        var visDiv = document.getElementById(\n          document.getElementById(\"testSelectNL\").value\n        );\n        visDiv.innerHTML = \"\";\n\n        visDiv = document.getElementById(\n          document.getElementById(\"testSelectAM\").value\n        );\n        visDiv.innerHTML = \"\";\n        const response = await fetch(link);\n        const data = d3.csvParse(await response.text(), d3.autoType);\n\n        var edges = [];\n        var nodes = [];\n\n        // \"edgeWeights.weight[source][target]\" can be used to get the weight of the source-target edge\n        // \"edgeWeights.maxWeight\" is the largest edge weight in the dataset\n        // this is used as an intermediary variable to calculate wEdges (weighted edges)\n        var edgeWeights = {\n          weight: {},\n          maxWeight: 0,\n        };\n\n        // weighted edges (maybe we will replace edges with this, as it adds weights to edges and also should improve performance)\n        var wEdges = [];\n\n        var maxDate = new Date(-3155692597470);\n        var minDate = new Date(3155692597470);\n\n        // this function auto-executes whenever visualise is clicked\n        // the purpose of this function is to calculate the minDate and the maxDate of the given dataset\n        (function () {\n          data.forEach((x) => {\n            // check if current date is larger than maxDate\n            if (x.date > maxDate) {\n              maxDate = x.date;\n            }\n\n            // check if current date is smaller than minDate\n            if (x.date < minDate) {\n              minDate = x.date;\n            }\n          });\n        })();\n\n        data.forEach((x) => {\n          var objNodesTo = {};\n          var objNodesFrom = {};\n\n          var index = nodes.findIndex((o) => o.employeeID == x.fromId);\n          if (index === -1) {\n            objNodesFrom[\"employeeID\"] = x.fromId;\n            objNodesFrom[\"email\"] = x.fromEmail;\n            objNodesFrom[\"jobTitle\"] = x.fromJobtitle;\n            nodes.push(objNodesFrom);\n\n            // add missing node ID to edgeWeights\n            edgeWeights.weight[x.fromId] = {};\n          }\n\n          var index2 = nodes.findIndex((o) => o.employeeID == x.toId);\n          if (index2 === -1) {\n            objNodesTo[\"employeeID\"] = x.toId;\n            objNodesTo[\"email\"] = x.toEmail;\n            objNodesTo[\"jobTitle\"] = x.toJobtitle;\n            nodes.push(objNodesTo);\n\n            // add missing node ID to edgeWeights\n            edgeWeights.weight[x.toId] = {};\n          }\n\n          // init current edge with weight 0\n          edgeWeights.weight[x.fromId][x.toId] = 0;\n          let temp = ++edgeWeights.weight[x.fromId][x.toId];\n\n          if (temp > edgeWeights.maxWeight) {\n            edgeWeights.maxWeight = temp;\n          }\n          \n        });\n\n        // calculate edgeWeight values\n        data.forEach((x) => {\n          let temp = ++edgeWeights.weight[x.fromId][x.toId];\n\n          if (temp > edgeWeights.maxWeight) {\n            edgeWeights.maxWeight = temp;\n          }\n          \n          // add the edges to the edges array.\n          var objEdges = {};\n          objEdges[\"source\"] = x.fromId;\n          objEdges[\"target\"] = x.toId;\n          objEdges[\"sentiment\"] = x.sentiment;\n          objEdges[\"messageType\"] = x.messageType;\n          objEdges[\"date\"] = x.date;\n          objEdges[\"weight\"] = edgeWeights.weight[x.fromId][x.toId];\n          edges.push(objEdges);\n        });\n\n        // create array of weighted edges\n        Object.keys(edgeWeights.weight).forEach((fromId) => {\n          Object.keys(edgeWeights.weight[fromId]).forEach((toId) => {\n            let objEdges = {};\n            objEdges[\"source\"] = fromId;\n            objEdges[\"target\"] =  toId;\n            objEdges[\"weight\"] = edgeWeights.weight[fromId][toId];\n            wEdges.push(objEdges);\n          });\n        });\n         // var canvas;\n          // var currentDate = minDate;\n          // while(currentDate <= maxDate) {\n          //     data.forEach((x) => {\n          //         if(x.date > currentDate) {\n          //             nodes.splice(nodes.indexOf(x.toId), 1);\n          //             nodes.splice(nodes.indexOf(x.fromId), 1);\n          //         }\n          //     });\n          //     generateNetworkCanvas(edges, nodes, canvas, selection);\n          //     var newDate = currentDate.setDate(currentDate.getDate() + 1);\n          //     currentDate = new Date(newDate);\n          //     await sleep(1000);\n          //     console.log(\"step\");\n          //    }\n          console.log(edges);\n          generateNetworkCanvas(edges, nodes, selection);\n          generateMatrix(wEdges, nodes, edgeWeights);\n      };\n      ul.appendChild(header);\n      ul.appendChild(_name);\n      ul.appendChild(_visualise);\n    },\n\n    getAllDatabaseEntries() {\n      db.collection(\"datasets\")\n        .get()\n        .then((snapshot) => {\n          snapshot.forEach((doc) => {\n            let name = doc.data().dataName;\n            let link = doc.data().fileLink;\n            this.showDatabaseEntries(name, link);\n          });\n        });\n    },\n\n    openBar() {\n      document.getElementById(\"theSidebar\").style.width = \"300px\";\n      document.getElementById(\"visLeft\").style.marginLeft = \"300px\";\n    },\n\n    closeBar() {\n      document.getElementById(\"theSidebar\").style.width = \"0\";\n      document.getElementById(\"visLeft\").style.marginLeft = \"0\";\n    },\n\n    selectFile(event) {\n      this.selectedFile = event.target.files[0]; //Selects the uploaded file and assigns it to the \"selectedFile\" variable.\n      //TODO: Add proper checks to ensure that the files given are csv files.\n    },\n\n    uploadFile() {\n      let fileName = `${this.selectedFile.name}`;\n      var storageRef = firebase.storage().ref(fileName);\n      let uploadTask = storageRef.put(this.selectedFile);\n      uploadTask.on(\n        \"state_changed\",\n        () => {},\n        (error) => {\n          //Handle unsuccessfull uploads.\n          console.log(error);\n        },\n        () => {\n          //Handle successfull uploads.\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n            this.datasets.fileLink = downloadURL;\n            this.saveDataToDB();\n          });\n        }\n      );\n    },\n\n    saveDataToDB() {\n      db.collection(\"datasets\")\n        .add(this.datasets)\n        .then((docRef) => {\n          var sucMsg = document.getElementById(\"msg\");\n          sucMsg.innerHTML = \"The dataset has been uploaded successfully.\";\n          console.log(\"Document written with ID: \", docRef.id);\n        })\n        .catch((error) => {\n          console.error(\"Error adding document: \", error);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.visGrid {\n  position: absolute;\n  display: grid;\n  width: 100%;\n  height: 100%;\n  background-color: #3f3f3f;\n  grid-template-columns: 1fr 1fr;\n  color: white;\n  z-index: -10;\n  transition: margin-left 0.5s;\n}\n\n#viscontent {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  transition: margin-left 0.5s;\n}\n\n.sidebar {\n  height: 100%;\n  width: 0;\n  position: fixed;\n  z-index: 2;\n  top: 0;\n  left: 0;\n  background-color: black;\n  color: white;\n  overflow-x: hidden;\n  padding-top: 60px;\n  transition: 0.5s; /* 0.5 second transition effect to slide in the sidebar */\n  float: left;\n}\n\n.sidebar a:hover {\n  color: #f1f1f1;\n}\n\n.sidebar .closebtn {\n  position: absolute;\n  top: 0;\n  right: 25px;\n  font-size: 36px;\n  margin-left: 50px;\n  padding: 8px 8px 8px 32px;\n  text-decoration: none;\n  color: #818181;\n  display: block;\n  transition: 0.3s;\n}\n\n.openbtn {\n  font-size: 20px;\n  cursor: pointer;\n  background-color: black;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n}\n\n.openbtn:hover {\n  color: black;\n  background-color: #42b983;\n}\n\n/* Push page content to the right */\n.sidebarButton {\n  position: absolute;\n  transition: margin-left 0.5s;\n  text-align: left;\n  z-index: 1;\n}\n\n.dataList {\n  height: 50%;\n  overflow-y: auto;\n}\n\n.fileUpload {\n  border-bottom: 2px solid white;\n}\n\n.windowSelection {\n  padding: 30px;\n  border-bottom: 2px solid white;\n}\n\n.type {\n  margin-top: 0.5cm;\n}\n\n#visLeft {\n  transition: margin-left 0.5s;\n  border-right: 3px solid white;\n}\n\n#visRight {\n  transition: margin-left 0.5s;\n}\n\n.sliderDiv {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  background-color: #2c3e50;\n  height: 40px;\n}\n\n\n.slider {\n  width: 80%;\n}\n\n#rangeValueLeft {\n  color: white;\n}\n\n#rangeValueRight {\n  color: white;\n}\n</style>\n"],"sourceRoot":""}]}