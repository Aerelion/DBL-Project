{"remainingRequest":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\src\\views\\fileUpload.vue?vue&type=template&id=94609c92&scoped=true","dependencies":[{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\src\\views\\fileUpload.vue","mtime":1622037620846},{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1616796459000},{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtOTQ2MDljOTIiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LTk0NjA5YzkyIik7Cgp2YXIgX2hvaXN0ZWRfMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImgxIiwgbnVsbCwgIkZpbGUgVXBsb2FkIFBhZ2UiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoInAiLCB7CiAgaWQ6ICJtc2ciCn0sIG51bGwsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8zID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiYnIiLCBudWxsLCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImJyIiwgbnVsbCwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJiciIsIG51bGwsIG51bGwsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF82ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiYnIiLCBudWxsLCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImJyIiwgbnVsbCwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzggPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJiciIsIG51bGwsIG51bGwsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiZGl2IiwgewogIGNsYXNzOiAicm93Igp9LCBbLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgidWwiLCB7CiAgaWQ6ICJsaXN0IiwKICBjbGFzczogImNvbHVtbiIKfSksIC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImRpdiIsIHsKICBpZDogInZpcyIsCiAgY2xhc3M6ICJjb2x1bW4iCn0pXSwgLTEKLyogSE9JU1RFRCAqLwopOwoKX3BvcFNjb3BlSWQoKTsKCmV4cG9ydCB2YXIgcmVuZGVyID0gLyojX19QVVJFX18qL193aXRoSWQoZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAiZmlsZXVwbG9hZCIsCiAgICBzdHlsZTogewogICAgICBkaXNwbGF5OiBfY3R4LmdyaWQKICAgIH0KICB9LCBbX2hvaXN0ZWRfMSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAidGV4dCIsCiAgICBwbGFjZWhvbGRlcjogIk5hbWUgb2YgdGhlIERhdGFzZXQiLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLmRhdGFzZXRzLmRhdGFOYW1lID0gJGV2ZW50OwogICAgfSksCiAgICBjbGFzczogImZvcm0tY29udHJvbCIKICB9LCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEuZGF0YXNldHMuZGF0YU5hbWVdXSksIF9ob2lzdGVkXzIsIF9ob2lzdGVkXzMsIF9ob2lzdGVkXzQsIF9jcmVhdGVWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAiZmlsZSIsCiAgICBhY2NlcHQ6ICIuY3N2IiwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnNlbGVjdEZpbGUgJiYgJG9wdGlvbnMuc2VsZWN0RmlsZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgbnVsbCwgMzIKICAvKiBIWURSQVRFX0VWRU5UUyAqLwogICksIF9jcmVhdGVWTm9kZSgiYnV0dG9uIiwgewogICAgb25DbGljazogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy51cGxvYWRGaWxlICYmICRvcHRpb25zLnVwbG9hZEZpbGUuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICJVcGxvYWQiKSwgX2hvaXN0ZWRfNSwgX2hvaXN0ZWRfNl0sIDQKICAvKiBTVFlMRSAqLwogICksIF9ob2lzdGVkXzcsIF9ob2lzdGVkXzgsIF9ob2lzdGVkXzldLCA2NAogIC8qIFNUQUJMRV9GUkFHTUVOVCAqLwogICk7Cn0pOw=="},{"version":3,"sources":["C:\\Users\\20202482\\Documents\\GitHub\\DBL-Project\\src\\views\\fileUpload.vue"],"names":[],"mappings":";;;;;;8BAEI,YAAA,CAAyB,IAAzB,EAAyB,IAAzB,EAAI,kBAAJ,EAAoB,CAAA;AAAA;AAApB,C;;8BAEA,YAAA,CAAgB,GAAhB,EAAgB;AAAb,EAAA,EAAE,EAAC;AAAU,CAAhB,EAAW,IAAX,EAAW,CAAA;AAAA;AAAX,C;;8BAAgB,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BAAI,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BAC6E,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BAAI,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BACjG,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BAAI,YAAA,CAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI,CAAA;AAAA;AAAJ,C;;8BACV,YAAA,CAGM,KAHN,EAGM;AAHD,EAAA,KAAK,EAAC;AAGL,CAHN,EAAgB,C,aAChB,YAAA,CAAmC,IAAnC,EAAmC;AAA/B,EAAA,EAAE,EAAC,MAA4B;AAArB,EAAA,KAAK,EAAC;AAAe,CAAnC,CADgB,E,aAEhB,YAAA,CAAmC,KAAnC,EAAmC;AAA9B,EAAA,EAAE,EAAC,KAA2B;AAArB,EAAA,KAAK,EAAC;AAAe,CAAnC,CAFgB,CAAhB,E;;AAAA,C;;;;;sDANA,YAAA,CAKM,KALN,EAKM;AALD,IAAA,KAAK,EAAC,YAKL;AALyB,IAAA,KAAK,EAAA;AAAA,MAAA,OAAA,EAAW,IAAA,CAAA;AAAX;AAK9B,GALN,E,CACE,U,kBACA,YAAA,CAAoG,OAApG,EAAoG;AAA7F,IAAA,IAAI,EAAC,MAAwF;AAAjF,IAAA,WAAW,EAAC,qBAAqE;;aAAvC,KAAA,CAAA,QAAA,CAAS,QAAT,GAAiB,M;MAAsB;AAArB,IAAA,KAAK,EAAC;AAAe,GAApG,E,IAAA,E;;AAAA,G,iBAA6D,KAAA,CAAA,QAAA,CAAS,Q,KACtE,U,EAAgB,U,EAAI,U,EACpB,YAAA,CAAsD,OAAtD,EAAsD;AAA/C,IAAA,IAAI,EAAC,MAA0C;AAAnC,IAAA,MAAM,EAAC,MAA4B;AAApB,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAAc,GAAtD,E,IAAA,E;;AAAA,G,EAAsD,YAAA,CAA2C,QAA3C,EAA2C;AAAlC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAA6B,GAA3C,EAA4B,QAA5B,C,EAA2C,U,EAAI,U,CAJvG,E;;AAAA,G,EAKM,U,EAAI,U,EACV,U","sourcesContent":["<template>\r\n  <div class=\"fileupload\" v-bind:style=\"{display:grid}\">\r\n    <h1>File Upload Page</h1>\r\n    <input type=\"text\" placeholder=\"Name of the Dataset\" v-model=datasets.dataName class=\"form-control\">\r\n    <p id=\"msg\"></p><br><br>\r\n    <input type=\"file\" accept=\".csv\" @change=\"selectFile\"><button @click=\"uploadFile\">Upload</button><br><br>\r\n  </div><br><br>\r\n  <div class=\"row\">\r\n  <ul id=\"list\" class=\"column\"> </ul>\r\n  <div id=\"vis\" class=\"column\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport firebase from 'firebase';\r\nimport * as d3 from 'd3';\r\nimport {db} from '../main'\r\n\r\nexport default {\r\n  name: 'fileUpload',\r\n  data () {\r\n      return {\r\n        datasets: {\r\n          fileLink: null,\r\n          dataName: null,\r\n        },\r\n          selectedFile: null,\r\n          datasetNo: 0\r\n      }\r\n  },\r\n  mounted() {\r\n    this.getAllDatabaseEntries(); //the mounted() lifecycle executes after all components of the page have finished loading, so after the page is ready\r\n                                  // the previous uploaded datasets are visible in the page.\r\n  },\r\n  methods: {\r\n      selectFile(event) {\r\n          this.selectedFile = event.target.files[0] //Selects the uploaded file and assigns it to the \"selectedFile\" variable.\r\n          //TODO: Add proper checks to ensure that the files given are csv files.\r\n      },\r\n      uploadFile() {\r\n          let fileName = `${this.selectedFile.name}`;\r\n          var storageRef = firebase.storage().ref(fileName);\r\n          let uploadTask = storageRef.put(this.selectedFile);\r\n          uploadTask.on('state_changed', () => {\r\n          }, (error) => {\r\n            //Handle unsuccessfull uploads.\r\n            console.log(error);\r\n          }, () => {\r\n            //Handle successfull uploads.\r\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n              this.datasets.fileLink = downloadURL;\r\n              this.saveDataToDB();\r\n            })\r\n          })\r\n          },\r\n      saveDataToDB() {\r\n          db.collection(\"datasets\").add(this.datasets).then((docRef) => {\r\n            var sucMsg = document.getElementById(\"msg\")\r\n            sucMsg.innerHTML = \"The dataset has been uploaded successfully.\"\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n          })\r\n          .catch( (error) => {\r\n            console.error(\"Error adding document: \", error);\r\n          })\r\n          },\r\n      showDatabaseEntries(name, link) {\r\n          var ul = document.getElementById('list');\r\n          var header = document.createElement('h2');\r\n          var _name = document.createElement('li');\r\n          var _visualise = document.createElement('button');\r\n          var visDiv = document.getElementById('vis');\r\n         // var testParaghraph = document.createElement(\"h2\");\r\n          header.innerHTML = \"Dataset-\"+ (++this.datasetNo);\r\n          _name.innerHTML=\"Name of the dataset: \"+name;\r\n          _visualise.innerHTML = \"Visualise\";\r\n          _visualise.onclick = async () => {\r\n            visDiv.innerHTML=\"\";\r\n            const response = await fetch(link);\r\n            const data = d3.csvParse(await response.text(), d3.autoType);\r\n            var edges = [];\r\n            var nodes = [];\r\n            //console.log(data);\r\n            data.forEach((x) => {\r\n              var objEdges = {}\r\n              objEdges[\"source\"] = x.fromId;\r\n              objEdges[\"target\"] = x.toId;\r\n              edges.push(objEdges);\r\n              var objNodesTo = {}\r\n              var objNodesFrom = {}\r\n              var index = nodes.findIndex(o => o.employeeID == x.fromId)\r\n              if(index === -1) {\r\n                objNodesFrom[\"employeeID\"] = x.fromId;\r\n                nodes.push(objNodesFrom);\r\n              }\r\n              var index2 = nodes.findIndex(o => o.employeeID == x.toId)\r\n              if(index2 === -1) {\r\n                objNodesTo[\"employeeID\"] = x.toId;\r\n                nodes.push(objNodesTo);\r\n              }\r\n            })\r\n            console.log(edges);\r\n            console.log(nodes);\r\n            this.generateNetwork(edges, nodes);\r\n          }\r\n          ul.appendChild(header);\r\n          ul.appendChild(_name);\r\n          ul.appendChild(_visualise);\r\n        },\r\n      getAllDatabaseEntries() {\r\n          db.collection('datasets').get().then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n              let name = doc.data().dataName;\r\n              let link = doc.data().fileLink;\r\n              this.showDatabaseEntries(name, link);\r\n            }\r\n            )\r\n          }\r\n          )\r\n        },\r\n    generateNetwork(edges, nodes) {\r\n      var w = 1000;\r\n      var h = 600;\r\n\r\n      var svg = d3\r\n        .select(\"#vis\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .style(\"background\", \"black\")\r\n        .call(d3.zoom().on('zoom', (event) => {\r\n            svg.attr('transform', event.transform).scaleExtent([1,24]);}))\r\n        .append('g');\r\n      \r\n      var simulation = d3.forceSimulation(nodes)\r\n          .force(\"charge\", d3.forceManyBody().strength(-50))\r\n          .force(\"link\", d3.forceLink().id(function (d) {return d.employeeID;}).links(edges))\r\n          .force(\"center\", d3.forceCenter(w / 2, h / 2))\r\n          .on(\"end\", ticked);\r\n\r\n        var edge = svg\r\n          .append(\"g\")\r\n          .attr(\"class\", \"links\")\r\n          .selectAll(\"line\")\r\n          .data(edges)\r\n          .enter()\r\n          .append(\"line\")\r\n          .style(\"stroke\", \"#aaa\");\r\n\r\n        var node = svg\r\n          .append(\"g\")\r\n          .attr(\"class\", \"nodes\")\r\n          .selectAll(\"circle\")\r\n          .data(nodes)\r\n          .join(\"circle\")\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", function() {return \"blue\";})\r\n          //.call(dragNodes(simulation));\r\n        \r\n        function ticked() {\r\n          edge\r\n            .attr(\"x1\", function(d) {\r\n              return d.source.x;\r\n            })\r\n            .attr(\"y1\", function(d) {\r\n              return d.source.y;\r\n            })\r\n            .attr(\"x2\", function(d) {\r\n              return d.target.x;\r\n            })\r\n            .attr(\"y2\", function(d) {\r\n              return d.target.y;\r\n            });\r\n            \r\n            node\r\n              .attr(\"cx\", function(d) {\r\n              return d.x;\r\n            })\r\n              .attr(\"cy\", function(d) {\r\n              return d.y;\r\n            });\r\n        }\r\n        /*function dragNodes(simulation) { // This needs a lot more optimization, so it is being left out for the prototype.\r\n          function dragStarted(event) {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n          }\r\n          \r\n          function dragged(event) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n          }\r\n          \r\n          function dragEnded(event) {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n          }\r\n          \r\n          return d3.drag()\r\n              .on(\"start\", dragStarted)\r\n              .on(\"drag\", dragged)\r\n              .on(\"end\", dragEnded);\r\n        }*/\r\n      console.log(simulation)\r\n      return svg.node();\r\n}\r\n/*generateNetworkWithCanvas(edges, nodes) { //Trying to optimize by using a canvas instead of svg, should improve performance of the full dataset quite a bit, but just testing atm. Not included in the prototype.\r\n      var w = 1000;\r\n      var h = 600;\r\n      var r = 5;\r\n\r\n      var htmlCanvas = d3\r\n        .select(\"#vis\")\r\n        .append(\"canvas\")\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .style(\"background\", \"black\");\r\n      \r\n      var canvasToolbox = htmlCanvas.node().getContext('2d'); //Canvas toolbox, it is an object carrying all the properties and methods we need to draw on the canvas.\r\n      \r\n      //var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\r\n      \r\n      var simulation = d3.forceSimulation(nodes)\r\n          .force(\"charge\", d3.forceManyBody().strength(-30))\r\n          .force(\"x\", d3.forceX(w / 2).strength(0.1))\r\n          .force(\"y\", d3.forceY(h / 2).strength(0.1))\r\n          .force(\"link\", d3.forceLink().id(function (d) {return d.employeeID;}).links(edges))\r\n          .force(\"center\", d3.forceCenter(w / 2, h / 2));\r\n      \r\n      var transform = d3.zoomIdentity;\r\n\r\n      initGraph(edges, nodes);\r\n\r\n      function initGraph(edges, nodes) {\r\n        \r\n        function zoomed(event) {\r\n          console.log(\"zooming\");\r\n          transform = event.transform;\r\n          ticked()\r\n        }\r\n        console.log(\"Hello\")\r\n        d3.select(htmlCanvas)\r\n            .call(d3.drag().subject(dragsubject).on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\",dragEnded))\r\n            .call(d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed));\r\n        \r\n        function dragsubject(event) {\r\n          var i,\r\n          x = transform.invertX(event.x),\r\n          y = transform.invertY(event.y),\r\n          dx,\r\n          dy;\r\n          for (i = nodes.length - 1; i >= 0; --i) {\r\n            var node = nodes[i];\r\n            dx = x - node.x;\r\n            dy = y - node.y;\r\n\r\n            if (dx * dx + dy * dy < r * r) {\r\n\r\n              node.x =  transform.applyX(node.x);\r\n              node.y = transform.applyY(node.y);\r\n\r\n              return node;\r\n            }\r\n          }\r\n        }\r\n        function dragStarted(event) {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n          }\r\n          \r\n          function dragged(event) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n          }\r\n          \r\n          function dragEnded(event) {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n          }\r\n          simulation.nodes(nodes).on('tick', ticked);\r\n          simulation.force(\"link\").links(edges);\r\n          \r\n          function ticked() {\r\n          canvasToolbox.save();\r\n          canvasToolbox.clearRect(0, 0, w, h);\r\n          canvasToolbox.translate(transform.x, transform.y);\r\n          canvasToolbox.scale(transform.k, transform.k);\r\n\r\n          edges.forEach(function (d) {\r\n            canvasToolbox.beginPath();\r\n            canvasToolbox.moveTo(d.source.x, d.source.y);\r\n            canvasToolbox.lineTo(d.target.x, d.target.y);\r\n            canvasToolbox.stroke();\r\n          });\r\n          nodes.forEach(function (d) {\r\n            canvasToolbox.beginPath();\r\n            canvasToolbox.arc(d.x, d.y, r, 0, 2 * Math.PI, true);\r\n            canvasToolbox.fillStyle = d.col ? \"red\":\"black\"\r\n            canvasToolbox.fill();\r\n          });\r\n          canvasToolbox.restore();\r\n        }\r\n\r\n      }\r\n}*/\r\n}\r\n}\r\n\r\n\r\n</script>\r\n<style scoped>\r\n  ul{\r\n    list-style-type: none;\r\n  }\r\n  .edges line {\r\n      stroke: rgb(255, 255, 255);\r\n      stroke-opacity: 0.6;\r\n    }\r\n\r\n    .nodes circle {\r\n      stroke: rgb(255, 255, 255);\r\n      stroke-width: 1.5px;\r\n    }\r\n    .row {\r\n      display: flex;\r\n    }\r\n    .column {\r\n      flex: 50%;\r\n    }\r\n</style>"],"sourceRoot":""}]}