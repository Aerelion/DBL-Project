{"remainingRequest":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true","dependencies":[{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\src\\views\\Home.vue","mtime":1624058065785},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622754903031},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js","mtime":1622754902831},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1622754910939},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622754903031},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1622754910934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVTdGF0aWNWTm9kZSBhcyBfY3JlYXRlU3RhdGljVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtZmFlNWJlY2UiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LWZhZTViZWNlIik7Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBpZDogInRoZVNpZGViYXIiLAogIGNsYXNzOiAic2lkZWJhciIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJmaWxlVXBsb2FkIgp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJwIiwgewogIGlkOiAibXNnIgp9LCBudWxsLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlU3RhdGljVk5vZGUoIjxkaXYgY2xhc3M9XCJ3aW5kb3dTZWxlY3Rpb25cIiBkYXRhLXYtZmFlNWJlY2U+PGgzIGRhdGEtdi1mYWU1YmVjZT5Ob2RlLUxpbmsgRGlhZ3JhbSBXaW5kb3c8L2gzPjxzZWxlY3QgaWQ9XCJ0ZXN0U2VsZWN0TkxcIiBkYXRhLXYtZmFlNWJlY2U+PG9wdGlvbiB2YWx1ZT1cInZpc0xlZnRcIiBkYXRhLXYtZmFlNWJlY2U+TGVmdDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9XCJ2aXNSaWdodFwiIGRhdGEtdi1mYWU1YmVjZT5SaWdodDwvb3B0aW9uPjwvc2VsZWN0PjxoMyBkYXRhLXYtZmFlNWJlY2U+QWRqYWNlbmN5IE1hdHJpeCBXaW5kb3c8L2gzPjxzZWxlY3QgaWQ9XCJ0ZXN0U2VsZWN0QU1cIiBkYXRhLXYtZmFlNWJlY2U+PG9wdGlvbiB2YWx1ZT1cInZpc1JpZ2h0XCIgZGF0YS12LWZhZTViZWNlPlJpZ2h0PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT1cInZpc0xlZnRcIiBkYXRhLXYtZmFlNWJlY2U+TGVmdDwvb3B0aW9uPjwvc2VsZWN0PjwhLS1cclxuICAgICAgJmx0O2gzIGNsYXNzPSZxdW90O3R5cGUmcXVvdDsmZ3Q7U2VsZWN0IHZpc3VhbGlzYXRpb24gdHlwZSZsdDsvaDMmZ3Q7XHJcbiAgICAgICZsdDtzZWxlY3QgaWQ9JnF1b3Q7dmlzVHlwZSZxdW90OyZndDtcclxuICAgICAgICAmbHQ7b3B0aW9uIHZhbHVlPSZxdW90O25vZGVsaW5rJnF1b3Q7Jmd0O05vZGUtTGluayBEaWFncmFtJmx0Oy9vcHRpb24mZ3Q7XHJcbiAgICAgICAgJmx0O29wdGlvbiB2YWx1ZT0mcXVvdDttYXRyaXgmcXVvdDsmZ3Q7QWRqYWNlbmN5IE1hdHJpeCZsdDsvb3B0aW9uJmd0O1xyXG4gICAgICAmbHQ7L3NlbGVjdCZndDtcclxuICAgICZsdDsvZGl2Jmd0O1xyXG4gICAgLS0+PC9kaXY+PGRpdiBjbGFzcz1cImRhdGFMaXN0XCIgZGF0YS12LWZhZTViZWNlPjx1bCBpZD1cImxpc3RcIiBjbGFzcz1cImNvbHVtblwiIGRhdGEtdi1mYWU1YmVjZT48L3VsPjwvZGl2PiIsIDIpOwoKdmFyIF9ob2lzdGVkXzYgPSB7CiAgY2xhc3M6ICJzaWRlYmFyQnV0dG9uIgp9OwoKdmFyIF9ob2lzdGVkXzcgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVN0YXRpY1ZOb2RlKCI8ZGl2IGNsYXNzPVwidmlzR3JpZFwiIGRhdGEtdi1mYWU1YmVjZT48ZGl2IGlkPVwidmlzY29udGVudFwiIGRhdGEtdi1mYWU1YmVjZT48ZGl2IGlkPVwidmlzTGVmdFwiIGRhdGEtdi1mYWU1YmVjZT48L2Rpdj48L2Rpdj48ZGl2IGlkPVwidmlzY29udGVudFwiIGRhdGEtdi1mYWU1YmVjZT48ZGl2IGlkPVwidmlzUmlnaHRcIiBkYXRhLXYtZmFlNWJlY2U+PC9kaXY+PC9kaXY+PC9kaXY+IiwgMSk7Cgp2YXIgX2hvaXN0ZWRfOCA9IHsKICBjbGFzczogInNsaWRlckRpdiIKfTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgicCIsIHsKICBpZDogInJhbmdlVmFsdWUiCn0sIG51bGwsIC0xCi8qIEhPSVNURUQgKi8KKTsKCl9wb3BTY29wZUlkKCk7CgpleHBvcnQgdmFyIHJlbmRlciA9IC8qI19fUFVSRV9fKi9fd2l0aElkKGZ1bmN0aW9uIChfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKCJhIiwgewogICAgaHJlZjogImphdmFzY3JpcHQ6dm9pZCgwKSIsCiAgICBjbGFzczogImNsb3NlYnRuIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuY2xvc2VCYXIgJiYgJG9wdGlvbnMuY2xvc2VCYXIuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICLDlyIpLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJ0ZXh0IiwKICAgIHBsYWNlaG9sZGVyOiAiTmFtZSBvZiB0aGUgRGF0YXNldCIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuZGF0YXNldHMuZGF0YU5hbWUgPSAkZXZlbnQ7CiAgICB9KSwKICAgIGNsYXNzOiAiZm9ybS1jb250cm9sIgogIH0sIG51bGwsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192TW9kZWxUZXh0LCAkZGF0YS5kYXRhc2V0cy5kYXRhTmFtZV1dKSwgX2hvaXN0ZWRfMywgX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJmaWxlIiwKICAgIGFjY2VwdDogIi5jc3YiLAogICAgb25DaGFuZ2U6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc2VsZWN0RmlsZSAmJiAkb3B0aW9ucy5zZWxlY3RGaWxlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCBudWxsLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgX2NyZWF0ZVZOb2RlKCJidXR0b24iLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnVwbG9hZEZpbGUgJiYgJG9wdGlvbnMudXBsb2FkRmlsZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgIiBVcGxvYWQgIildKSwgX2hvaXN0ZWRfNF0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzYsIFtfY3JlYXRlVk5vZGUoImJ1dHRvbiIsIHsKICAgIGNsYXNzOiAib3BlbmJ0biIsCiAgICBvbkNsaWNrOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLm9wZW5CYXIgJiYgJG9wdGlvbnMub3BlbkJhci5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgIuKYsCBPcHRpb25zIildKSwgX2hvaXN0ZWRfNywgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF84LCBbX2NyZWF0ZVZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJyYW5nZSIsCiAgICBtaW46ICIxIiwKICAgIG1heDogIjEwMCIsCiAgICB2YWx1ZTogIjAiLAogICAgY2xhc3M6ICJzbGlkZXIiLAogICAgaWQ6ICJyYW5nZSIsCiAgICBvbklucHV0OiBfY2FjaGVbNl0gfHwgKF9jYWNoZVs2XSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnNob3dSYW5nZVZhbHVlICYmICRvcHRpb25zLnNob3dSYW5nZVZhbHVlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBvbkNoYW5nZTogX2NhY2hlWzddIHx8IChfY2FjaGVbN10gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy51cGRhdGUgJiYgJG9wdGlvbnMudXBkYXRlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCBudWxsLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgX2hvaXN0ZWRfOV0pXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9KTs="},{"version":3,"sources":["D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\src\\views\\Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div id=\"theSidebar\" class=\"sidebar\">\r\n    <a href=\"javascript:void(0)\" class=\"closebtn\" @click=\"closeBar\">&times;</a>\r\n\r\n    <div class=\"fileUpload\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Name of the Dataset\"\r\n        v-model=\"datasets.dataName\"\r\n        class=\"form-control\"\r\n      />\r\n      <p id=\"msg\"></p>\r\n      <input type=\"file\" accept=\".csv\" @change=\"selectFile\" /><button\r\n        @click=\"uploadFile\"\r\n      >\r\n        Upload\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"windowSelection\">\r\n      <h3>Node-Link Diagram Window</h3>\r\n      <select id=\"testSelectNL\">\r\n        <option value=\"visLeft\">Left</option>\r\n        <option value=\"visRight\">Right</option>\r\n      </select>\r\n\r\n      <h3>Adjacency Matrix Window</h3>\r\n      <select id=\"testSelectAM\">\r\n        <option value=\"visRight\">Right</option>\r\n        <option value=\"visLeft\">Left</option>\r\n      </select>\r\n\r\n      <!--\r\n      <h3 class=\"type\">Select visualisation type</h3>\r\n      <select id=\"visType\">\r\n        <option value=\"nodelink\">Node-Link Diagram</option>\r\n        <option value=\"matrix\">Adjacency Matrix</option>\r\n      </select>\r\n    </div>\r\n    --></div>\r\n\r\n    <div class=\"dataList\">\r\n      <ul id=\"list\" class=\"column\"></ul>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"sidebarButton\">\r\n    <button class=\"openbtn\" @click=\"openBar\">&#9776; Options</button>\r\n  </div>\r\n\r\n  <div class=\"visGrid\">\r\n    <div id=\"viscontent\">\r\n      <div id=\"visLeft\"></div>\r\n    </div>\r\n    <div id=\"viscontent\"><div id=\"visRight\"></div></div>\r\n  </div>\r\n  <div class=\"sliderDiv\">\r\n    <input\r\n      type=\"range\"\r\n      min=\"1\"\r\n      max=\"100\"\r\n      value=\"0\"\r\n      class=\"slider\"\r\n      id=\"range\"\r\n      @input=\"showRangeValue\"\r\n      @change=\"update\"\r\n    />\r\n    <p id=\"rangeValue\"></p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport firebase from \"firebase\";\r\nimport * as d3 from \"d3\";\r\nimport { db } from \"../main\";\r\n//import generateNetwork from \"../visualisations/nodelink\";\r\nimport generateMatrix from \"../visualisations/adjacencymatrix\";\r\nimport generateNetworkCanvas from \"../visualisations/nodelinkv2.0\";\r\n\r\nvar link\r\n\r\nexport default {\r\n  name: \"Home\",\r\n  components: {},\r\n  data() {\r\n    return {\r\n      datasets: {\r\n        fileLink: null,\r\n        dataName: null,\r\n      },\r\n      selectedFile: null,\r\n      datasetNo: 0,\r\n      months: [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getAllDatabaseEntries(); //the mounted() lifecycle executes after all components of the page have finished loading, so after the page is ready\r\n    // the previous uploaded datasets are visible in the page.\r\n  },\r\n\r\n  methods: {\r\n    showRangeValue() {\r\n      var x = document.getElementById(\"range\").value;\r\n      var dateValue = new Date(parseInt(x));\r\n\r\n      var displayDate =\r\n        this.months[dateValue.getMonth()] +\r\n        \" \" +\r\n        dateValue.getDate() +\r\n        \", \" +\r\n        dateValue.getFullYear();\r\n\r\n      document.getElementById(\"rangeValue\").innerHTML = displayDate;\r\n    },\r\n    extractName(email) {\r\n        // Splice off the email server\r\n        var nameBuilder = email.substring(0, email.indexOf(\"@\"));\r\n        // Split mail into seperate names\r\n        nameBuilder = nameBuilder.split(\".\");\r\n        // Initialize surnames and capitalize\r\n        var name = \"\";\r\n        for (var i = 0; i < nameBuilder.length; i++) {\r\n            if (nameBuilder[i] != null && nameBuilder[i].length > 0) {\r\n                if (i < nameBuilder.length-1) {\r\n                    name = name + nameBuilder[i][0].toUpperCase() + \".\";\r\n                } else {\r\n                    name = name + \" \" + nameBuilder[i][0].toUpperCase() + nameBuilder[i].substring(1);\r\n                }\r\n            }\r\n        }\r\n        return name\r\n    },\r\n    showDatabaseEntries(name) {\r\n      // this will maybe be needed for the animation\r\n      // function sleep(ms) {\r\n      //   return new Promise(\r\n      //     resolve => setTimeout(resolve, ms)\r\n      //   );\r\n      // }\r\n\r\n\r\n      var ul = document.getElementById(\"list\");\r\n      var header = document.createElement(\"h2\");\r\n\r\n      var _name = document.createElement(\"li\");\r\n      var _visualise = document.createElement(\"button\");\r\n      header.innerHTML = \"Dataset-\" + ++this.datasetNo;\r\n      _name.innerHTML = \"Name of the dataset: \" + name;\r\n      _visualise.innerHTML = \"Visualise\";\r\n      _visualise.onclick = async () => {\r\n        \r\n        this.update()\r\n      };\r\n      ul.appendChild(header);\r\n      ul.appendChild(_name);\r\n      ul.appendChild(_visualise);\r\n    },\r\n\r\n    getAllDatabaseEntries() {\r\n      db.collection(\"datasets\")\r\n        .get()\r\n        .then((snapshot) => {\r\n          snapshot.forEach((doc) => {\r\n            let name = doc.data().dataName;\r\n            link = doc.data().fileLink;\r\n            this.showDatabaseEntries(name, link);\r\n          });\r\n        });\r\n    },\r\n\r\n    async update() {\r\n      var selection = null;\r\n      var visDiv = document.getElementById(\r\n          document.getElementById(\"testSelectNL\").value\r\n        );\r\n        visDiv.innerHTML = \"\";\r\n\r\n        visDiv = document.getElementById(\r\n          document.getElementById(\"testSelectAM\").value\r\n        );\r\n        visDiv.innerHTML = \"\";\r\n        const response = await fetch(link);\r\n        var data = d3.csvParse(await response.text(), d3.autoType);\r\n\r\n        var edges = [];\r\n        var nodes = [];\r\n\r\n        // \"edgeWeights.weight[source][target]\" can be used to get the weight of the source-target edge\r\n        // \"edgeWeights.maxWeight\" is the largest edge weight in the dataset\r\n        // this is used as an intermediary variable to calculate wEdges (weighted edges)\r\n        var edgeWeights = {\r\n          weight: {},\r\n          maxWeight: 0,\r\n        };\r\n\r\n        // weighted edges (maybe we will replace edges with this, as it adds weights to edges and also should improve performance)\r\n        var wEdges = [];\r\n\r\n        // this function auto-executes whenever visualise is clicked\r\n        // the purpose of this function is to calculate the minDate and the maxDate of the given dataset\r\n        (function () {\r\n\r\n          var maxDate = new Date(-3155692597470);\r\n          var minDate = new Date(3155692597470);\r\n\r\n          data.forEach((x) => {\r\n            // check if current date is larger than maxDate\r\n            if (x.date > maxDate) {\r\n              maxDate = x.date;\r\n            }\r\n\r\n            // check if current date is smaller than minDate\r\n            if (x.date < minDate) {\r\n              minDate = x.date;\r\n            }\r\n          });\r\n\r\n          document.getElementById(\"range\").max = maxDate.getTime();\r\n          document.getElementById(\"range\").min = minDate.getTime();\r\n          // document.getElementById(\"range\").value = (maxDate.getTime()+minDate.getTime())/2;\r\n\r\n        })();\r\n\r\n        this.showRangeValue();  // display date right after pressing visualise\r\n\r\n        data=data.filter((x) => {return x.date<=document.getElementById(\"range\").value;});  // filter out datapoints given the slider\r\n\r\n        data.forEach((x) => {\r\n          var objNodesTo = {};\r\n          var objNodesFrom = {};\r\n\r\n          var index = nodes.findIndex((o) => o.employeeID == x.fromId);\r\n          if (index === -1) {\r\n            objNodesFrom[\"employeeID\"] = x.fromId;\r\n            objNodesFrom[\"email\"] = x.fromEmail;\r\n            objNodesFrom[\"name\"]=this.extractName(x.fromEmail);\r\n            objNodesFrom[\"jobTitle\"] = x.fromJobtitle;\r\n            nodes.push(objNodesFrom);\r\n\r\n            // add missing node ID to edgeWeights\r\n            edgeWeights.weight[x.fromId] = {};\r\n          }\r\n\r\n          var index2 = nodes.findIndex((o) => o.employeeID == x.toId);\r\n          if (index2 === -1) {\r\n            objNodesTo[\"employeeID\"] = x.toId;\r\n            objNodesTo[\"email\"] = x.toEmail;\r\n            objNodesTo[\"name\"]=this.extractName(x.toEmail);\r\n            objNodesTo[\"jobTitle\"] = x.toJobtitle;\r\n            nodes.push(objNodesTo);\r\n\r\n            // add missing node ID to edgeWeights\r\n            edgeWeights.weight[x.toId] = {};\r\n          }\r\n\r\n          // init current edge with weight 0\r\n          edgeWeights.weight[x.fromId][x.toId] = 0;\r\n          let temp = ++edgeWeights.weight[x.fromId][x.toId];\r\n\r\n          if (temp > edgeWeights.maxWeight) {\r\n            edgeWeights.maxWeight = temp;\r\n          }\r\n        });\r\n\r\n        // calculate edgeWeight values\r\n        data.forEach((x) => {\r\n          let temp = ++edgeWeights.weight[x.fromId][x.toId];\r\n\r\n          if (temp > edgeWeights.maxWeight) {\r\n            edgeWeights.maxWeight = temp;\r\n          }\r\n\r\n          // add the edges to the edges array.\r\n          var objEdges = {};\r\n          objEdges[\"source\"] = x.fromId;\r\n          objEdges[\"target\"] = x.toId;\r\n          objEdges[\"sentiment\"] = x.sentiment;\r\n          objEdges[\"messageType\"] = x.messageType;\r\n          objEdges[\"date\"] = x.date;\r\n          objEdges[\"weight\"] = edgeWeights.weight[x.fromId][x.toId];\r\n          edges.push(objEdges);\r\n        });\r\n\r\n        // create array of weighted edges\r\n        Object.keys(edgeWeights.weight).forEach((fromId) => {\r\n          Object.keys(edgeWeights.weight[fromId]).forEach((toId) => {\r\n            let objEdges = {};\r\n            objEdges[\"source\"] = fromId;\r\n            objEdges[\"target\"] = toId;\r\n            objEdges[\"weight\"] = edgeWeights.weight[fromId][toId];\r\n            wEdges.push(objEdges);\r\n          });\r\n        });\r\n        \r\n        generateNetworkCanvas(edges, nodes, selection);\r\n        generateMatrix(wEdges, nodes, edgeWeights);\r\n    },\r\n\r\n    openBar() {\r\n      document.getElementById(\"theSidebar\").style.width = \"300px\";\r\n      document.getElementById(\"visLeft\").style.marginLeft = \"300px\";\r\n    },\r\n\r\n    closeBar() {\r\n      document.getElementById(\"theSidebar\").style.width = \"0\";\r\n      document.getElementById(\"visLeft\").style.marginLeft = \"0\";\r\n    },\r\n\r\n    selectFile(event) {\r\n      this.selectedFile = event.target.files[0]; //Selects the uploaded file and assigns it to the \"selectedFile\" variable.\r\n      //TODO: Add proper checks to ensure that the files given are csv files.\r\n    },\r\n\r\n    uploadFile() {\r\n      let fileName = `${this.selectedFile.name}`;\r\n      var storageRef = firebase.storage().ref(fileName);\r\n      let uploadTask = storageRef.put(this.selectedFile);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        () => {},\r\n        (error) => {\r\n          //Handle unsuccessfull uploads.\r\n          console.log(error);\r\n        },\r\n        () => {\r\n          //Handle successfull uploads.\r\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n            this.datasets.fileLink = downloadURL;\r\n            this.saveDataToDB();\r\n          });\r\n        }\r\n      );\r\n    },\r\n\r\n    saveDataToDB() {\r\n      db.collection(\"datasets\")\r\n        .add(this.datasets)\r\n        .then((docRef) => {\r\n          var sucMsg = document.getElementById(\"msg\");\r\n          sucMsg.innerHTML = \"The dataset has been uploaded successfully.\";\r\n          console.log(\"Document written with ID: \", docRef.id);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error adding document: \", error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.visGrid {\r\n  position: absolute;\r\n  display: grid;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #3f3f3f;\r\n  grid-template-columns: 1fr 1fr;\r\n  color: white;\r\n  z-index: -10;\r\n  transition: margin-left 0.5s;\r\n}\r\n\r\n#viscontent {\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n  transition: margin-left 0.5s;\r\n}\r\n\r\n.sidebar {\r\n  height: 100%;\r\n  width: 0;\r\n  position: fixed;\r\n  z-index: 2;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: black;\r\n  color: white;\r\n  overflow-x: hidden;\r\n  padding-top: 60px;\r\n  transition: 0.5s; /* 0.5 second transition effect to slide in the sidebar */\r\n  float: left;\r\n}\r\n\r\n.sidebar a:hover {\r\n  color: #f1f1f1;\r\n}\r\n\r\n.sidebar .closebtn {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 25px;\r\n  font-size: 35px;\r\n  margin-left: 50px;\r\n  padding: 8px;\r\n  text-decoration: none;\r\n  color: #818181;\r\n  display: block;\r\n  transition: 0.3s;\r\n}\r\n\r\n.openbtn {\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  background-color: black;\r\n  color: white;\r\n  padding: 10px 15px;\r\n  border: none;\r\n}\r\n\r\n.openbtn:hover {\r\n  color: black;\r\n  background-color: #42b983;\r\n  transition: 0.3s;\r\n}\r\n\r\n.sidebarButton {\r\n  position: absolute;\r\n  transition: margin-left 0.5s;\r\n  text-align: left;\r\n  z-index: 1;\r\n}\r\n\r\n.dataList {\r\n  height: 50%;\r\n  overflow-y: auto;\r\n}\r\n\r\n.fileUpload {\r\n  border-bottom: 2px solid white;\r\n}\r\n\r\n.windowSelection {\r\n  padding: 30px;\r\n  border-bottom: 2px solid white;\r\n}\r\n\r\n.type {\r\n  margin-top: 0.5cm;\r\n}\r\n\r\n#visLeft {\r\n  transition: margin-left 0.5s;\r\n  border-right: 3px solid white;\r\n}\r\n\r\n#visRight {\r\n  transition: margin-left 0.5s;\r\n}\r\n\r\n.sliderDiv {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  background-color: #2c3e50;\r\n  height: 40px;\r\n}\r\n\r\n.slider {\r\n  width: 80%;\r\n}\r\n\r\n#rangeValue {\r\n  color: white;\r\n}\r\n</style>\r\n"],"sourceRoot":""}]}