{"remainingRequest":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\src\\visualisations\\adjacencymatrix.js","dependencies":[{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\src\\visualisations\\adjacencymatrix.js","mtime":1623181075850},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622754903031},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\babel-loader\\lib\\index.js","mtime":1622754902831},{"path":"D:\\_DOCUMENTE_ANDREE\\GitHub\\DBL-Project\\node_modules\\eslint-loader\\index.js","mtime":1622754905504}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgKiBhcyBkMyBmcm9tICJkMyI7CgpmdW5jdGlvbiBnZW5lcmF0ZU1hdHJpeChlZGdlcywgbm9kZXMpIHsKICB2YXIgc2lkZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0ZXN0U2VsZWN0Iikub3B0aW9uc1sxXS52YWx1ZTsKICB2YXIgdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ2aXNjb250ZW50IikuY2xpZW50V2lkdGg7CiAgdmFyIGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidmlzY29udGVudCIpLmNsaWVudEhlaWdodDsKICB2YXIgc3F1YXJlU2l6ZSA9IE1hdGguZmxvb3IoaCAvIG5vZGVzLmxlbmd0aCkgLSAxOyAvLyBub2RlUG9zaXRpb25zIGlzIGFuIGFycmF5IHRoYXQgc3RvcmVzIHRoZSBwb3NpdGlvbnMgd2hlcmUgdGhlIG5vZGVzIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGFkaiBtYXRyaXgKICAvLyB0aGlzIGFycmF5IGhhcyB1bmRlZmluZWQgZ2FwcywgYnV0IGl0cyBzaXplIHdpbGwgbmV2ZXIgYmUgbGFyZ2VyIHRoYW4gdGhlIGxhcmdlc3Qgbm9kZSBpZCBudW1iZXIKICAvLyBhIGJldHRlciBhcHByb2FjaCBpcyBieSB1c2luZyBoYXNoIHRhYmxlcywgYnV0IHRoaXMgc2hvdWxkIHdvcmsgZm9yIHRoZSBlbnJvbiBkYXRhc2V0CiAgLy8gdGhpcyBtZXRob2QgaXMgdmVyeSBmYXN0LCBidXQgZG9lc24ndCB3b3JrIGlmIHRoaXMgaXMgYSBsYXJnZSBJRCBudW1iZXIKCiAgdmFyIG5vZGVQb3NpdGlvbnMgPSB7fTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykgewogICAgdmFyIHBvc2l0aW9uID0gbm9kZXNbaV0uZW1wbG95ZWVJRC50b1N0cmluZygpOwogICAgbm9kZVBvc2l0aW9uc1twb3NpdGlvbl0gPSBpOwogIH0KCiAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgnIycgKyBzaWRlKS5hcHBlbmQoInN2ZyIpLmF0dHIoImhlaWdodCIsIGgpLmF0dHIoIndpZHRoIiwgdykuc3R5bGUoImJhY2tncm91bmQiLCAiYmxhY2siKTsgLy8gc3ZnLmFwcGVuZCgicmVjdCIpCiAgLy8gLmF0dHIoImhlaWdodCIsIDMwKQogIC8vIC5hdHRyKCJ3aWR0aCIsIDMwKQogIC8vIC5hdHRyKCJmaWxsIiwgIndoaXRlIik7CgogIHN2Zy5zZWxlY3RBbGwoInJlY3QiKS5kYXRhKGVkZ2VzKS5lbnRlcigpLmFwcGVuZCgicmVjdCIpLmF0dHIoIngiLCBmdW5jdGlvbiAoZCkgewogICAgcmV0dXJuIG5vZGVQb3NpdGlvbnNbZC50YXJnZXQudG9TdHJpbmcoKV0gKiBzcXVhcmVTaXplOwogIH0pLmF0dHIoInkiLCBmdW5jdGlvbiAoZCkgewogICAgcmV0dXJuIG5vZGVQb3NpdGlvbnNbZC5zb3VyY2UudG9TdHJpbmcoKV0gKiBzcXVhcmVTaXplOwogIH0pLmF0dHIoImhlaWdodCIsIHNxdWFyZVNpemUpLmF0dHIoIndpZHRoIiwgc3F1YXJlU2l6ZSkuYXR0cigiZmlsbCIsICJ3aGl0ZSIpOwogIGNvbnNvbGUubG9nKG5vZGVzLCBlZGdlcywgbm9kZVBvc2l0aW9ucyk7Cn0KCmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlTWF0cml4Ow=="},{"version":3,"sources":["D:/_DOCUMENTE_ANDREE/GitHub/DBL-Project/src/visualisations/adjacencymatrix.js"],"names":["d3","generateMatrix","edges","nodes","side","document","getElementById","options","value","w","clientWidth","h","clientHeight","squareSize","Math","floor","length","nodePositions","i","position","employeeID","toString","svg","select","append","attr","style","selectAll","data","enter","d","target","source","console","log"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AAEpC,MAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,OAAtC,CAA8C,CAA9C,EAAiDC,KAA5D;AACA,MAAIC,CAAC,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCI,WAA9C;AACA,MAAIC,CAAC,GAAGN,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCM,YAA9C;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAGR,KAAK,CAACa,MAArB,IAA+B,CAAlD,CANoC,CAQpC;AACA;AACA;AACA;;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAAK,CAACa,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACrC,QAAIC,QAAQ,GAAIhB,KAAK,CAACe,CAAD,CAAL,CAASE,UAAV,CAAsBC,QAAtB,EAAf;AACAJ,IAAAA,aAAa,CAACE,QAAD,CAAb,GAA0BD,CAA1B;AACD;;AAGD,MAAII,GAAG,GAAGtB,EAAE,CACTuB,MADO,CACA,MAAMnB,IADN,EAEPoB,MAFO,CAEA,KAFA,EAGPC,IAHO,CAGF,QAHE,EAGQd,CAHR,EAIPc,IAJO,CAIF,OAJE,EAIOhB,CAJP,EAKPiB,KALO,CAKD,YALC,EAKa,OALb,CAAV,CAnBoC,CA0BpC;AACA;AACA;AACA;;AAEAJ,EAAAA,GAAG,CAACK,SAAJ,CAAc,MAAd,EACGC,IADH,CACQ1B,KADR,EAEG2B,KAFH,GAGGL,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,GAJR,EAIa,UAACK,CAAD,EAAO;AAChB,WAAOb,aAAa,CAAEa,CAAC,CAACC,MAAH,CAAWV,QAAX,EAAD,CAAb,GAAuCR,UAA9C;AACD,GANH,EAOGY,IAPH,CAOQ,GAPR,EAOa,UAACK,CAAD,EAAO;AAChB,WAAOb,aAAa,CAAEa,CAAC,CAACE,MAAH,CAAWX,QAAX,EAAD,CAAb,GAAuCR,UAA9C;AACD,GATH,EAUGY,IAVH,CAUQ,QAVR,EAUkBZ,UAVlB,EAWGY,IAXH,CAWQ,OAXR,EAWiBZ,UAXjB,EAYGY,IAZH,CAYQ,MAZR,EAYgB,OAZhB;AAcAQ,EAAAA,OAAO,CAACC,GAAR,CAAY/B,KAAZ,EAAmBD,KAAnB,EAA0Be,aAA1B;AACD;;AAED,eAAehB,cAAf","sourcesContent":["import * as d3 from \"d3\";\r\n\r\nfunction generateMatrix(edges, nodes) {\r\n\r\n  var side = document.getElementById(\"testSelect\").options[1].value;\r\n  var w = document.getElementById(\"viscontent\").clientWidth;\r\n  var h = document.getElementById(\"viscontent\").clientHeight;\r\n\r\n  const squareSize = Math.floor(h / nodes.length) - 1;\r\n\r\n  // nodePositions is an array that stores the positions where the nodes should be displayed in the adj matrix\r\n  // this array has undefined gaps, but its size will never be larger than the largest node id number\r\n  // a better approach is by using hash tables, but this should work for the enron dataset\r\n  // this method is very fast, but doesn't work if this is a large ID number\r\n  var nodePositions = {};\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    let position = (nodes[i].employeeID).toString()\r\n    nodePositions[position] = i;\r\n  }\r\n\r\n\r\n  var svg = d3\r\n    .select('#' + side)\r\n    .append(\"svg\")\r\n    .attr(\"height\", h)\r\n    .attr(\"width\", w)\r\n    .style(\"background\", \"black\");\r\n\r\n  // svg.append(\"rect\")\r\n  // .attr(\"height\", 30)\r\n  // .attr(\"width\", 30)\r\n  // .attr(\"fill\", \"white\");\r\n\r\n  svg.selectAll(\"rect\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"x\", (d) => {\r\n      return nodePositions[(d.target).toString()] * squareSize;\r\n    })\r\n    .attr(\"y\", (d) => {\r\n      return nodePositions[(d.source).toString()] * squareSize;\r\n    })\r\n    .attr(\"height\", squareSize)\r\n    .attr(\"width\", squareSize)\r\n    .attr(\"fill\", \"white\");\r\n\r\n  console.log(nodes, edges, nodePositions);\r\n}\r\n\r\nexport default generateMatrix"]}]}